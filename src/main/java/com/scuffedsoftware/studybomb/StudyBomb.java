/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package com.scuffedsoftware.studybomb;
import java.io.File;
import javax.swing.text.*;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import java.awt.*;
import java.awt.event.*;
import java.awt.font.TextAttribute;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import javax.swing.JLayeredPane;


class timerFilter extends DocumentFilter {
    
    private boolean filter(String text) {
        //If the string is not an integer, return false.
        if (text.matches("[0-9]+")) {
            return true;
        } else {
            return false;
        }
    }
    
    @Override
    public void insertString(FilterBypass fb, int offset, String string, AttributeSet attr) 
            throws BadLocationException {
        Document doc = fb.getDocument();
        StringBuilder timerText = new StringBuilder();
        timerText.append(doc.getText(0,doc.getLength()));
        
        if (filter(timerText.toString())) {
            super.insertString(fb, offset, string, attr);
            if (timerText.length() <= 8) {
                super.remove(fb, 0, 1);
            if (timerText.length() < 8) {
                super.insertString(fb, 0, string,attr);
                }
            }
        } else {
            Toolkit.getDefaultToolkit().beep();
        }
    }
    
    @Override
       public void replace(FilterBypass fb, int offset, int length, String text, 
               AttributeSet attrs) throws BadLocationException {

      Document doc = fb.getDocument();
      StringBuilder timerText = new StringBuilder();
      timerText.append(doc.getText(0, doc.getLength()));
      timerText.replace(offset, offset + length, text);

      //If filter returns true, allow replacement. If too few characters exist,
      //...initiate removal.
      if (filter(timerText.toString())) {
         super.replace(fb, offset, length, text, attrs); //TODO: fix dis
            if (timerText.length() <= 7) {
                super.remove(fb, 0, 1);
            }
            if (timerText.length() < 7) {
                //If the character at the start is 0, insert 0. 
                //if NOT, replace the string with whatever was in the first slot
                super.insertString(fb, 0, timerText.substring(0, 1),null);
                }
      } else {
         // nothing! :)
      }
   }
       
   @Override
   public void remove(FilterBypass fb, int offset, int length)
         throws BadLocationException {
      Document doc = fb.getDocument();
      StringBuilder sb = new StringBuilder();
      sb.append(doc.getText(0, doc.getLength()));
      sb.delete(offset, offset + length);
      
      if (filter(sb.toString())) {
         super.remove(fb, offset, length);
         super.insertString(fb, 0, "0",null);
      } else {
         // nothing! :)
      }
   }
}

final class DeleteAssist { 
    private static ArrayList<File> files = new ArrayList();
    private static ArrayList<File> folders = new ArrayList();
    
    public static void kaboom(File target) {
    targetParse(target);
    
        for (File file : files) {
            System.out.println("deleted" + file.getName() + "!");
            file.delete();
            
        }
        
        for (File folder : folders) {
            System.out.println("deleted " + folder.getName() + "!");
            folder.delete();
            
        }
        
        target.delete();
    
    System.out.println("see ya!");
    }
    
    /**
        Parses all files and subdirectories of a given target, adding both into
        corresponding ArrayLists.
    */
    private static void targetParse(File target) {
        
        File[] tempList = target.listFiles();
        if (tempList == null) {
            return;
        }
        for (File item : tempList) {
            if (item.listFiles() == null) {
                files.add(item);
            } else {
                targetParse(item);
                folders.add(item);
            }
        }
    }
    
}
/**
 *
 * @author Ismael Fuentes
 */
public class StudyBomb extends javax.swing.JFrame {
    private File fileTarget;
    private ArrayList<Task> taskList = new ArrayList();
    private int taskCount = 0;
    int taskCompleteCount = 0;
    
    /**
     * Creates new form StudyBombGUI
     */
    public StudyBomb() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        timerDialog = new javax.swing.JFrame();
        fileExplorer = new javax.swing.JFileChooser();
        timerControls = new javax.swing.JPanel();
        startButton = new javax.swing.JButton();
        stopButton = new javax.swing.JButton();
        filePanel = new javax.swing.JPanel();
        fileSearchButton = new javax.swing.JButton();
        fileLabel = new javax.swing.JLabel();
        taskView = new javax.swing.JLayeredPane();
        taskScroll = new javax.swing.JScrollPane();
        taskPanel = new javax.swing.JPanel();
        taskControlPanel = new javax.swing.JPanel();
        taskAddButton = new javax.swing.JButton();
        taskClearButton = new javax.swing.JButton();
        timerPanel = new javax.swing.JLayeredPane();
        timerInput = new javax.swing.JTextField();
        Font timerFont = null;
        try { //Opens the font file and creates appropriate text attributes
            File fontStyle = new File("src/main/resources/fonts/RobotoMono-Italic.ttf");
            timerFont = Font.createFont(Font.TRUETYPE_FONT, fontStyle).deriveFont(44f);
            Map<TextAttribute,Object> attributes = new HashMap<TextAttribute,Object>();
            attributes.put(TextAttribute.TRACKING, 0.3);
            timerFont = timerFont.deriveFont(attributes);
            timerInput.setFont(timerFont);
        } catch (Exception e) {
            e.printStackTrace();
        }
        Map<TextAttribute,Object> attributes = new HashMap<TextAttribute,Object>();
        attributes.put(TextAttribute.TRACKING, 0.3);
        filterGUISetup(); //Assigns DocumentFilters to input field
        timerUI = new javax.swing.JLabel();
        timerDisplay = new javax.swing.JLabel();

        javax.swing.GroupLayout timerDialogLayout = new javax.swing.GroupLayout(timerDialog.getContentPane());
        timerDialog.getContentPane().setLayout(timerDialogLayout);
        timerDialogLayout.setHorizontalGroup(
            timerDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        timerDialogLayout.setVerticalGroup(
            timerDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );

        fileExplorer.setApproveButtonText("Select");
        fileExplorer.setApproveButtonToolTipText("Selects this file as a target.");
        fileExplorer.setFileSelectionMode(javax.swing.JFileChooser.FILES_AND_DIRECTORIES);

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("StudyBomb");
        setAutoRequestFocus(false);
        setResizable(false);

        timerControls.setLayout(new java.awt.CardLayout());

        startButton.setText("Start");
        startButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                startButtonActionPerformed(evt);
            }
        });
        timerControls.add(startButton, "card3");

        stopButton.setText("Stop");
        stopButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                stopButtonActionPerformed(evt);
            }
        });
        timerControls.add(stopButton, "card2");

        filePanel.setLayout(new javax.swing.BoxLayout(filePanel, javax.swing.BoxLayout.LINE_AXIS));

        fileSearchButton.setText("Select");
        fileSearchButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fileSearchButtonActionPerformed(evt);
            }
        });
        filePanel.add(fileSearchButton);

        fileLabel.setText("Choose a file...");
        filePanel.add(fileLabel);

        taskPanel.setRequestFocusEnabled(false);
        taskPanel.setLayout(new javax.swing.BoxLayout(taskPanel, javax.swing.BoxLayout.PAGE_AXIS));
        taskScroll.setViewportView(taskPanel);

        taskAddButton.setText("+");
        taskAddButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                taskAddButtonActionPerformed(evt);
            }
        });

        taskClearButton.setText("Clear");
        taskClearButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                taskClearButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout taskControlPanelLayout = new javax.swing.GroupLayout(taskControlPanel);
        taskControlPanel.setLayout(taskControlPanelLayout);
        taskControlPanelLayout.setHorizontalGroup(
            taskControlPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(taskControlPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(taskAddButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(taskClearButton)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        taskControlPanelLayout.setVerticalGroup(
            taskControlPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(taskControlPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(taskControlPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(taskAddButton, javax.swing.GroupLayout.PREFERRED_SIZE, 21, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(taskClearButton))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        taskView.setLayer(taskScroll, javax.swing.JLayeredPane.DEFAULT_LAYER);
        taskView.setLayer(taskControlPanel, javax.swing.JLayeredPane.DEFAULT_LAYER);

        javax.swing.GroupLayout taskViewLayout = new javax.swing.GroupLayout(taskView);
        taskView.setLayout(taskViewLayout);
        taskViewLayout.setHorizontalGroup(
            taskViewLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(taskViewLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(taskViewLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(taskScroll)
                    .addGroup(taskViewLayout.createSequentialGroup()
                        .addComponent(taskControlPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 158, Short.MAX_VALUE)))
                .addContainerGap())
        );
        taskViewLayout.setVerticalGroup(
            taskViewLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(taskViewLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(taskScroll, javax.swing.GroupLayout.PREFERRED_SIZE, 462, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(taskControlPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        timerInput.setBackground(java.awt.SystemColor.control);
        timerInput.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        timerInput.setText("000000");
        timerInput.setBorder(null);
        timerInput.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                timerInputMouseClicked(evt);
            }
        });

        timerUI.setBackground(java.awt.SystemColor.control);
        timerUI.setFont(timerFont);
        timerUI.setText("   : : ");
        timerUI.setRequestFocusEnabled(false);
        timerUI.setVerifyInputWhenFocusTarget(false);

        timerDisplay.setBackground(java.awt.SystemColor.control);
        timerDisplay.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        timerDisplay.setFont(timerFont);
        timerDisplay.setText("000000");
        timerDisplay.setEnabled(false);

        timerPanel.setLayer(timerInput, javax.swing.JLayeredPane.DEFAULT_LAYER);
        timerPanel.setLayer(timerUI, javax.swing.JLayeredPane.DEFAULT_LAYER);
        timerPanel.setLayer(timerDisplay, javax.swing.JLayeredPane.DEFAULT_LAYER);

        javax.swing.GroupLayout timerPanelLayout = new javax.swing.GroupLayout(timerPanel);
        timerPanel.setLayout(timerPanelLayout);
        timerPanelLayout.setHorizontalGroup(
            timerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, timerPanelLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(timerInput, javax.swing.GroupLayout.PREFERRED_SIZE, 371, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
            .addGroup(timerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(timerPanelLayout.createSequentialGroup()
                    .addComponent(timerUI, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addContainerGap())
                .addComponent(timerDisplay, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 383, Short.MAX_VALUE))
        );
        timerPanelLayout.setVerticalGroup(
            timerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, timerPanelLayout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(timerInput, javax.swing.GroupLayout.PREFERRED_SIZE, 103, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addGroup(timerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(timerUI, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(timerDisplay, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 103, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(taskView, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(filePanel, javax.swing.GroupLayout.PREFERRED_SIZE, 363, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(103, 103, 103)
                                .addComponent(timerControls, javax.swing.GroupLayout.PREFERRED_SIZE, 145, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(81, 81, 81)
                        .addComponent(timerPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(101, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(taskView))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(83, 83, 83)
                        .addComponent(timerPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(filePanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(127, 127, 127)
                        .addComponent(timerControls, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(9, 9, 9))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void fileSearchButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fileSearchButtonActionPerformed
        // TODO add your handling code here:
        int userChoice = fileExplorer.showOpenDialog(this);
        if (userChoice == JFileChooser.APPROVE_OPTION) {
            this.fileTarget = fileExplorer.getSelectedFile();
            fileLabel.setText(fileTarget.getPath());
        }
    }//GEN-LAST:event_fileSearchButtonActionPerformed

    private void startButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_startButtonActionPerformed

        int userChoice = JOptionPane.showConfirmDialog(timerDialog,
                "Please note that I wasn't joking about deleting your files. \n\n"
                        + "I will actually delete them. They will be unrecoverable.\n\n"
                        + "These files will delete once your allotted time is up. "
                        + "After 20% of your time has passed, you can opt to cancel early. \n"
                        + "I take no responsibility for damage caused by any lost files.\n"
                        + "Before you begin, ensure you have enough time without outside interference.\n\n"
                        + "Would you like to continue? Accepting will instantly start the timer.",
                "Warning",JOptionPane.YES_NO_OPTION);
        switch (userChoice) {
            case JOptionPane.YES_OPTION:
                if (fileTarget != null) {
                    JOptionPane.showMessageDialog(timerDialog,"No file has been selected.");
                    break;
                } else {
                timerInput.setVisible(false);
                timerInput.setEnabled(false);
                timerDisplay.setEnabled(true);
                timerDisplay.setText(timerInput.getText());
                
                
                startButton.setVisible(false);
                startButton.setEnabled(false);
                stopButton.setVisible(true);
                stopButton.setEnabled(true);
                taskAddButton.setEnabled(false);
                //TODO: Once I figure out CardLayout, rewrite this. it's ugly and makes me cry
                //by extension, rewrite this whole thing. it is UGLY
                
                for (ActionListener task : startButton.getActionListeners()) {
                    if ((task.getClass().getName().equals("com.scuffedsoftware.studybomb.Task$6")))
                    task.actionPerformed(new ActionEvent(startButton, ActionEvent.ACTION_PERFORMED, null) { //Locks the tasks, making them uneditable
                    });
                }
                
                TimerAssist.timerStart(timerDisplay.getText(),timerDisplay, fileTarget); //starts the timer
                
                System.out.println(timerInput.getFont());
                System.out.println(timerDisplay.getFont());
                break;
                }
            case JOptionPane.NO_OPTION:
                break;
        //
            default:
                break;
        }
    }//GEN-LAST:event_startButtonActionPerformed

    private void stopButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_stopButtonActionPerformed
        if (taskCompleteCount != taskCount) {
            JOptionPane.showMessageDialog(timerDialog, "HEY! All tasks haven't been completed yet!");
            return;
        }
        
        if ("000000".equals(timerDisplay.getText())) {
            JOptionPane.showMessageDialog(timerDialog,"KABOOM! Time's up.");
        } else {
            JOptionPane.showMessageDialog(timerDialog,"Coward.");
        }       
        
        TimerAssist.timerStop();

        timerInput.setVisible(true);
        timerInput.setEnabled(true);
        timerDisplay.setEnabled(false);
        timerDisplay.setText("000000");
        taskCompleteCount = 0;        
        
        startButton.setVisible(true);
        startButton.setEnabled(true);
        stopButton.setVisible(false);
        stopButton.setEnabled(false);
        taskAddButton.setEnabled(true);
        //TODO: make this look better someday, it makes my eyes water
        
    }//GEN-LAST:event_stopButtonActionPerformed

    private void timerInputMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_timerInputMouseClicked
// corrects user input if the minute/second counter exceeds 59
    StringBuilder timerTextEdit = new StringBuilder(timerInput.getText());
    
    if (Integer.parseInt(timerTextEdit.substring(2,4)) > 59) {
        timerTextEdit.replace(2,4,"59");
        }
    
    if (Integer.parseInt(timerTextEdit.substring(4,6)) > 59) {
        timerTextEdit.replace(4,6,"59");
        }
    
    timerInput.setText(timerTextEdit.toString());
    timerPanel.setLayer(timerUI, JLayeredPane.DRAG_LAYER);
    timerPanel.setLayer(timerInput, JLayeredPane.DEFAULT_LAYER);
    
    }//GEN-LAST:event_timerInputMouseClicked

    private void taskAddButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_taskAddButtonActionPerformed
                Task newTask = new Task(this, startButton);
                newTask.setAlignmentY(Component.TOP_ALIGNMENT);
                
                taskPanel.add(newTask);
                taskList.add(newTask);
                taskCount += 1;
                
                // Revalidate and repaint the panel to show the new button
                taskPanel.revalidate();
                taskPanel.repaint();
    }//GEN-LAST:event_taskAddButtonActionPerformed

    private void taskClearButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_taskClearButtonActionPerformed
        for (Task item : taskList) {
                item = null; { //Deletes all tasks
            }
        }
        taskList.clear();
        taskCount = 0;
        
        //Removes all task GUI elements, and revalidates/repaints the panel to reflect changes
        taskPanel.removeAll();
        taskPanel.revalidate();
        taskPanel.repaint();
    }//GEN-LAST:event_taskClearButtonActionPerformed

    private void filterGUISetup() {
        Document timerDoc = timerInput.getDocument();
        AbstractDocument doc;
        
        if (timerDoc instanceof AbstractDocument) {
            doc = (AbstractDocument)timerDoc;
            doc.setDocumentFilter(new timerFilter());
        }
    }
    
    /**
     * @param args the command line arguments
     */
    
    
    
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
//            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
//                if ("Nimbus".equals(info.getName())) {
//                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
//                    break;
//                }
//            }
        javax.swing.UIManager.setLookAndFeel(javax.swing.UIManager.getSystemLookAndFeelClassName());
//        javax.swing.UIManager.setLookAndFeel(javax.swing.UIManager.getCrossPlatformLookAndFeelClassName());
//        javax.swing.UIManager.setLookAndFeel("com.sun.java.swing.plaf.motif.MotifLookAndFeel");
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(StudyBomb.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(StudyBomb.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(StudyBomb.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(StudyBomb.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
//        </editor-fold>
//        </editor-fold>

        /* Create and display the form. */
        
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new StudyBomb().setVisible(true);
                
                
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JFileChooser fileExplorer;
    private javax.swing.JLabel fileLabel;
    private javax.swing.JPanel filePanel;
    private javax.swing.JButton fileSearchButton;
    private javax.swing.JButton startButton;
    private javax.swing.JButton stopButton;
    private javax.swing.JButton taskAddButton;
    private javax.swing.JButton taskClearButton;
    private javax.swing.JPanel taskControlPanel;
    private javax.swing.JPanel taskPanel;
    private javax.swing.JScrollPane taskScroll;
    private javax.swing.JLayeredPane taskView;
    private javax.swing.JPanel timerControls;
    private javax.swing.JFrame timerDialog;
    private javax.swing.JLabel timerDisplay;
    private javax.swing.JTextField timerInput;
    private javax.swing.JLayeredPane timerPanel;
    private javax.swing.JLabel timerUI;
    // End of variables declaration//GEN-END:variables
}
